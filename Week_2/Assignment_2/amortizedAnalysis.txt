/* CS261- Assignment 2 - Q.2*/
/* Name: Sky Wilson
 * Date: 04/08/2015
 */

1) How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty array which starts out at capacity 8, assuming that the array will double in capacity each time a new item is added to an already full dynamic array? As N (ie. the number of pushes) grows large , under this strategy for resizing, what is the big-oh complexity for a push?

		a) Cost Units per 32 operations:

				cap + (((cap + 1) + (cap - 1)) + (2*cap + 1) + (2*cap - 1) + ... )
		
				8 user ops + (8 + 1) dyn. alloc ops + (8 - 1) user ops + (16 + 1) dyn. alloc ops + (16 -1 ) user ops 
				newCapaity = 8; newSize = 0;
					Push Operation | Cost Unit

					push(<someInt>)| 1			
					push(<someInt>)| 1			
					push(<someInt>)| 1			
					push(<someInt>)| 1			
					push(<someInt>)| 1			
					push(<someInt>)| 1			
					push(<someInt>)| 1			
					push(<someInt>)| 1			
					push(<someInt>)| newCapacity(dyn. alloc copy-reassignment) + 1(dyn. alloc assignment) ; newSize = 9 ; newCapacity = 16
					push(<someInt>)| (newCapacity - 1)(user assignment) ; newSize = 16	
					
			16 consecutive push operations:	
						8 + 8 + 1 + 7 = 24

					Total Cost: 24 cost units ; Average Cost: 24 cost units / 16 elements = 1.5 cost units / elemnts

					push(<someInt>)| newCapacity(dyn. alloc copy-reassignment) + 1(dyn. alloc assignment) ; newSize = 31 ; newCapacity = 32
					push(<someInt>)| (newCapacity - 1)(user assignment) ; newSize = 32	

			32 consecutive push operations:
					
					Total Cost:  56 cost units ; Average Cost: 56 cost units / 32 elements = 1.75 Unit Costs / element
						
		b)  big-o complexity of a push operation as n grows large:
				
				== O(n) 	* O(g(n)) == {f(n): There exists some constants c && n_0, f(n) <= c * g(n), n >= n_0, c >0, n_0 >= 1}
						* ie. f(n) exists as an element of the set Og(n)) if f(n) is <= a time constant (where c > 0) multiplied by g(n) (where n >= n_0 and n_0 >= 1)
				

2) How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty array which starts out at capacity 8, assuming that the array will grow by a constant 2 spaces each time a new item is added to an already full dynamic array? As N (ie. the number of pushes) grows large, under this strategy for resizing, what is the big-oh notation for a push?

		a) Cost Units per 32 operations:

				cap + (((newCap + 1) + 1) + ((newCap + 1) + 1) + ...) 
			
				8 + (((8 + user ops + 1 dyn. alloc ops) + 1 user ops) * 12)
				newCapaity = 8; newSize = 0;
				
					Push Operation | Cost Unit

					push(<someInt>)| 1			
					push(<someInt>)| 1			
					push(<someInt>)| 1			
					push(<someInt>)| 1			
					push(<someInt>)| 1			
					push(<someInt>)| 1			
					push(<someInt>)| 1			
					push(<someInt>)| 1			
					push(<someInt>)| newCapacity(dyn. alloc copy-reassignment) + 1(dyn. alloc assignment) ; newSize = 9  ; newCapacity = 10
					push(<someInt>)| 1(userFillRemaining) ; newSize = 10			
					
			10 consecutive push operations:
						8 + 8 + 1 + 1 = 18					

					Total Cost: 18 cost units ; Average Cost: 18 cost units / 16 elements = 1.125 cost units / elements
				
					push(<someInt>)| newCapacity(dyn. alloc copy-reassignment) + 1(dyn. alloc assignment) ; newSize = 11 ; newCapacity = 12
					push(<someInt>)| 1(userFillRemaining) ; newSize = 12			
						18 + (8 + 1 + 1) = 28
					push(<someInt>)| newCapacity(dyn. alloc copy-reassignment) + 1(dyn. alloc assignment) ; newSize = 13 ; newCapacity = 14
					push(<someInt>)| 1(userFillRemaining) ; newSize = 14	
						28 + (12 + 1 + 1) = 42		
					push(<someInt>)| newCapacity(dyn. alloc copy-reassignment) + 1(dyn. alloc assignment) ; newSize = 15 ; newCapacity = 16
					push(<someInt>)| 1(userFillRemaining) ; newSize = 16	
						42 + (14 + 1 + 1) = 58		
					push(<someInt>)| newCapacity(dyn. alloc copy-reassignment) + 1(dyn. alloc assignment) ; newSize = 17 ; newCapacity = 18
					push(<someInt>)| 1(userFillRemaining) ; newSize = 18
						58 + (16 + 1 + 1) = 76
					push(<someInt>)| newCapacity(dyn. alloc copy-reassignment) + 1(dyn. alloc assignment) ; newSize = 19 ; newCapacity = 20
					push(<someInt>)| 1(userFillRemaining) ; newSize = 20	
						76 + (18 + 1 + 1) = 96
					push(<someInt>)| newCapcity(dyn. alloc copy-reassignment) + 1(dyn. alloc assignment) ; newSize = 21 ; newCapacity = 22
					push(<someInt>)| 1(userFillRemaining) ; newSize = 22			
						96 + (20 + 1 + 1) = 118 
					push(<someInt>)| newCapacity(dyn. alloc copy-reassignment) + 1(dyn. alloc assignment) ; newSize = 23 ; newCapacity = 24
					push(<someInt>)| 1(userFillRemaining) ; newSize = 24			
						118 + (22 + 1 + 1) = 142
					push(<someInt>)| newCapacity(dyn. alloc copy-reassignment) + 1(dyn. alloc assignment) ; newSize = 25 ; newCapacity = 26
					push(<someInt>)| 1(userFillRemaining) ; newSize = 26			
						142 + (24 + 1 + 1) = 168
					push(<someInt>)| newCapacity(dyn. alloc copy-reassignment) + 1(dyn. alloc assignment) ; newSize = 27 ; newCapacity = 28
					push(<someInt>)| 1(userFillRemaining) ; newSize = 28			
						168 + (26 + 1 + 1) = 196
					push(<someInt>)| newCapcity(dyn. alloc copy-reassignment) + 1(dyn. alloc assignment) ; newSize = 29 ; newCapacity = 30
					push(<someInt>)| 1(userFillRemaining) ; newSize = 30			
						196 + (28 + 1 + 1) = 226
					push(<someInt>)| newCapacity(dyn. alloc copy-reassignment) + 1(dyn. alloc assignment) ; newSize = 31 ; newCapacity = 32
					push(<someInt>)| 1(userFillRemaining) ; newSize = 32 			
						226 + (30 + 1 + 1) = 258

			32 consecutive push operations:
				
					Total Cost: 258 cost units ; Average Cost: 260 cost units / 32 elements = 8.0625 cost units / elements

						== 8.0625 Unit Costs per element

		b) big-o complexity of a push operation as n grows large:
				
				== O(n) 	* O(g(n)) == {f(n): There exists some constants c && n_0, f(n) <= c * g(n), n >= n_0, c >0, n_0 >= 1}
						* ie. f(n) exists as an element of the set Og(n)) if f(n) is <= a time constant (where c > 0) multiplied by g(n) (where n >= n_0 and n_0 >= 1)
			


3) Suppose that a dynamic array stack doubles its capacity when it is full, shrinks (on pop only) its capacity by half when the array is half full or less. Can you devise a sequence of N push() and pop() operations which will result in poor performance (O(N^2)totalCost)? How might you adjust the array's shrinking policy to avoid this? (Hint: You may assume that the intial capacity of the array is N/2)
	
		*** This sequence results in (O(N^2)totalCost) : everytime an push() is invoked, the N memory must be allocated (because the capacity is reached because size sits at N -1.
			After the new element is added, pop() is invoked shrinking the size of the dyn array and thus triggering a deallocation of N/2 memory (because size i < capacity)
			By invoking pop() right after push(), it ensures that the size of will always be < capacity and so, everytime push() is subsequently invoked, the dyn array must reallocate 
			N memory. 
		
				For every new element (push()) all N elements prior to the new element must be copied/reallocated thus O(N^2) 
	
		a) A sequence N push() and pop() operations that results in (O(n^2)totalCost):
			* This sequences pushes N/2 values into dyn array. The dyn array size and capacity are now equal triggering a new allocation of ((N/2) + (N/2), which gives the dyn array a capacit of N
			* Next the sequence pops 1 value from the array, decreasing the dyn array size to ((N/2) - 1) which is now half or less than half of the dyn array capacity of N thus triggering
				a new deallocation of (N/2) which results in a newCapacity of N/2
			* The dyn array size is now ((N/2) - 1) and the dyn array capacity is now N/2
			* Next this sequences pushes N/2 values into dyn array. The dyn array size and capacity are now equal triggering a new allocation of ((N/2) + (N/2), which gives the dyn array a capacit of N
			* Next the sequence pops 1 value from the array, decreasing the dyn array size to ((N/2) - 1) which is now half or less than half of the dyn array capacity of N thus triggering
				a new deallocation of (N/2) which results in a newCapacity of N/2
			* The dyn array size is now ((N/2) - 1) and the dyn array capacity is now N/2
			* Next this sequences pushes N/2 values into dyn array. The dyn array size and capacity are now equal triggering a new allocation of ((N/2) + (N/2), which gives the dyn array a capacit of N
			* Next the sequence pops 1 value from the array, decreasing the dyn array size to ((N/2) - 1) which is now half or less than half of the dyn array capacity of N thus triggering
				a new deallocation of (N/2) which results in a newCapacity of N/2
			* The dyn array size is now ((N/2) - 1) and the dyn array capacity is now N/2
			...

			initial capacity = N/2
			initial size = 0
				
				push() 1
				push() 1
				push() 1
				...
				push() 1 (N/2) times
				
				ARRAY FULL - ALLOCATE:	N/2 + N/2 			
				push(<someInt>)| newCapacity(dyn. alloc copy-reassignment) ; newSize = (N/2)  ; newCapacity = N
				pop() 1(dyn. alloc assignment) ; newSize = ((N/2) - 1) ; newCapacity = N
			 
				ARRAY HALF FULL	OR LESS - DEALLOCATE: (N/2) 
				newSize = ((N/2) - 1) ; newCapacity = N/2
				push() 1
				newSize = (N/2) ; newCapacity = N/2

				ARRAY FULL - ALLOCATE:	N/2 + N/2 			
				push(<someInt>)| newCapacity(dyn. alloc copy-reassignment) ; newSize = (N/2)  ; newCapacity = N
				pop() 1(dyn. alloc assignment) ; newSize = ((N/2) - 1) ; newCapacity = N
			 
				ARRAY HALF FULL	OR LESS - DEALLOCATE: (N/2) 
				newSize = ((N/2) - 1) ; newCapacity = N/2
				push() 1
				newSize = (N/2) ; newCapacity = N/2

				ARRAY FULL - ALLOCATE:	N/2 + N/2 			
				push(<someInt>)| newCapacity(dyn. alloc copy-reassignment) ; newSize = (N/2)  ; newCapacity = N
				pop() 1(dyn. alloc assignment) ; newSize = ((N/2) - 1) ; newCapacity = N

				ARRAY HALF FULL	OR LESS - DEALLOCATE: (N/2) 
				newSize = ((N/2) - 1) ; newCapacity = N/2
				push() 1
				newSize = (N/2) ; newCapacity = N/2

				...
				
				
	b) To solve this inefficiency one should adjust the shrinking policy of the dyn array to only shrink when the dyn array's size is WITHIN THE RANGE OF HALF CAPACITY AND CAPACITY
		So only shrink when the dyn array's 	size > (capacity/2) && size < capacity
		This should result in avoiding the O(N^2) inefficiency of the above sequence that expands and shrinks a dynamic array				
